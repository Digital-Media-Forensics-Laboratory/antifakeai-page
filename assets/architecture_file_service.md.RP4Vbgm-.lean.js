import{_ as t,c as h,a0 as l,j as i,a,G as p,B as k,o as e}from"./chunks/framework.BD2nrhTt.js";const u=JSON.parse('{"title":"文件服务","description":"","frontmatter":{"title":"文件服务","outline":[2,4]},"headers":[],"relativePath":"architecture/file_service.md","filePath":"architecture/file_service.md","lastUpdated":1748314076000}'),d={name:"architecture/file_service.md"},r={id:"文件交互设计",tabindex:"-1"};function E(g,s,o,y,c,F){const n=k("Badge");return e(),h("div",null,[s[3]||(s[3]=l(`<h1 id="文件服务" tabindex="-1">文件服务 <a class="header-anchor" href="#文件服务" aria-label="Permalink to &quot;文件服务&quot;">​</a></h1><p>文件服务涉及到用户上传的文件（包括图像、视频、音频等）的保存，以及从文件上传到完成检测这一流程中，文件数据在系统各模块间的交互。总体而言，该模块的设计可以分为两部分：</p><ul><li><strong>文件存储系统</strong>：文件如何保存在系统里，如何从系统里获取保存的文件，或者以何种形式向外暴露文件。</li><li><strong>文件交互设计</strong>：文件在各个功能间的传递。例如，一个检测模型在何时以何种方式读取待检测的文件。</li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">设计关键</p><p></p><ol><li>减少文件具体内容在系统各个模块间的频繁传递，减轻网络带宽压力</li><li>充分利用缓存如<code>Redis</code>以加速文件读取，减少磁盘IO</li></ol></div><h2 id="文件存储系统" tabindex="-1">文件存储系统 <a class="header-anchor" href="#文件存储系统" aria-label="Permalink to &quot;文件存储系统&quot;">​</a></h2><p>文件存储系统以<a href="https://min.io/" target="_blank" rel="noreferrer"><code>MINIO</code></a>为基础构建。这是一个开源的对象存储（OSS）方案，基于 GNU AGPL v3 开源协议。该系统完美兼容 AWS S3 协议。MINIO 原生支持分布式，且性能极高，在分布式设计和固态硬盘结合下，速度瓶颈几乎都在网络带宽上。</p><details class="details custom-block"><summary>对象存储（OSS）</summary><p>对象存储（Object Storage Service，简称OSS）是一个专用名词，如今的对象存储都是基于云的，因此不少厂商也直接把它叫做云存储。与对象存储服务的交互需要有特定的协议来完成。Amazon S3 (Simple Storage Service) 简单存储服务，是 Amazon 的公开云存储服务，与之对应的协议被称为 S3 协议，目前 S3 协议已经被视为公认的行业标准协议。</p></details><p>MINIO 分为两个部分，服务端部分和客户端部分服务端保存文件，并接收各类请求。客户端则是封装了常用的功能，如对象上传、下载，利用封装好的接口，可以使用程序向服务端发送请求。下面将介绍服务端部署和客户端的常用操作。</p><h3 id="服务端部署" tabindex="-1">服务端部署 <a class="header-anchor" href="#服务端部署" aria-label="Permalink to &quot;服务端部署&quot;">​</a></h3><p>MINIO本身支持分布式，且支持分布式的磁盘卷。但是我们平台仅需要单节点、单数据卷的部署即可。平台的 MINIO 服务由 docker 部署，添加在了<code>docker-compose.yml</code>中统一编排。当然也可以使用<code>docker run</code>命令直接运行。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-gu-0P" id="tab-MaHzrRy" checked><label data-title="docker-compose.yml" for="tab-MaHzrRy">docker-compose.yml</label><input type="radio" name="group-gu-0P" id="tab-e1VXjxV"><label data-title="Docker" for="tab-e1VXjxV">Docker</label></div><div class="blocks"><div class="language-yaml vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  afk-minio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">minio/minio:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">afk-network</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    expose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 这是容器的网络里需要暴露的端口</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开发环境可以将这两个端口暴露出来调试</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;9000:9000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;9001:9001&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MINIO_CONFIG_ENV_FILE=/etc/config.env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">server --console-address &quot;:9001&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${MINIO_CONFIG}:/etc/config.env:ro</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${MINIO_DATA_ROOT}:/mnt/data</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 数据保存的位置</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                  \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9000:9000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9001:9001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                     \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PATH:/mnt/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                             \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/default/minio:/etc/config.env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MINIO_CONFIG_ENV_FILE=/etc/config.env&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;minio_local&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                          \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  minio</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --console-address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:9001&quot;</span></span></code></pre></div></div></div><p>MINIO的数据默认端口是<code>9000</code>，Dashboard的端口是<code>9001</code>。在调试期间，可以将这两个端口映射出来。在生产环境中，通常不需要Dashboard的端口，因此也不需要<code>expose</code>。除此之外，还有几个点需要注意：</p><ul><li><p><strong>MINIO_CONFIG</strong></p><p>该变量是本机的config文件，作为minio的配置文件映射至容器。 具体内容如下：</p><div class="language-dotenv vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dotenv</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MINIO_ROOT_USER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">admin</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MINIO_ROOT_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seclab605607</span></span>
<span class="line highlighted"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MINIO_VOLUMES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mnt/data&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 需要与数据卷映射目录对应</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MINIO_OPTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--console-address :9001&quot;</span></span></code></pre></div><p>里面可以配置 Dashboard 的账号密码。</p></li><li><p><strong>MINIO_DATA_ROOT</strong> 选择minio的数据保存位置，非常重要，一定要映射，不然容器销毁后数据全部都会丢失。在此处，我们映射到容器内的<code>/mnt/data</code>，这个路径需要与config文件里的<code>MINIO_VOLUMES</code>匹配。</p></li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>MINIO 官方提供了更加详细的文档，需要更多的拓展功能（如分布式）可以参考官网教程。 <a href="https://min.io/docs/minio/container/index.html" target="_blank" rel="noreferrer">文档地址</a></p></div><h3 id="客户端操作" tabindex="-1">客户端操作 <a class="header-anchor" href="#客户端操作" aria-label="Permalink to &quot;客户端操作&quot;">​</a></h3><p>我们可以通过<code>http://ip:port</code>的形式访问 MINIO 的管理面板，并上传和下载图像。然而，文件系统作为服务之一，需要使用程序来访问和控制 MINIO，也就是所谓的客户端 SDK。客户端 SDK 包含了常见的功能封装，且不同的编程语言应该有分别对应的客户端 SDK。 MINIO 提供了常见编程语言的SDK，AFK平台后端采用的语言是<code>C#</code>，因此需要使用<code>C#</code>的SDK。</p><p>在操作MINIO前我们需要了解OSS的常用操作。OSS的标准操作很多，均符合 S3 标准，文档可以参考Amazon的 <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html" target="_blank" rel="noreferrer">S3 API Reference</a>，但是对本平台而言，常用的操作无非就是以下几种。</p><table tabindex="0"><thead><tr><th>操作</th><th>API</th><th>说明</th></tr></thead><tbody><tr><td>获取对象</td><td><code>GetObject</code></td><td>用于下载文件</td></tr><tr><td>上传对象</td><td><code>PutObject</code></td><td>用于上传</td></tr><tr><td>获取属性</td><td><code>GetObjectAttributes</code></td><td>获取对象元数据(Meta data)</td></tr><tr><td>预签名获取对象</td><td><code>GetObject</code> with Presigned URL</td><td>给出下载对象的url ℹ️</td></tr></tbody></table><p>ℹ️ ： 提供一个url之后，向该url发送请求，即可下载文件。</p><p>下面以程序形式介绍如何使用<code>C#</code>向OSS存储桶来上传和下载对象。</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>客户端操作很多，以上只是列举了常用的操作，还有许多操作尽管目前平台没有用到，但是以后有机会用到。完整的操作列表请参考<a href="https://min.io/docs/minio/linux/developers/dotnet/minio-dotnet.html" target="_blank" rel="noreferrer">文档地址</a>。</p></div><h4 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h4><p>C# 通过创建一个客户端对象来连接 MINIO 服务端。</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IMinioClient</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> minioClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MinioClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;afk-minio:9000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 服务器地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;seclab605607&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 访问的key和password</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不使用https</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建对象</span></span></code></pre></div><ul><li><strong>WithCredentials</strong>：可以去 dashboard 里自己生成，也可以直接使用账号密码。本平台直接使用了默认的账号密码。</li><li><strong>WithSSL</strong>：使用 https 需要加上此行，本平台使用 http，因此删除。</li></ul><p>通常我们会使用依赖注入，以便在控制器和服务中使用。因此在大多数应用里，初始化一般是这么进行的：</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder.Services.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddMinio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configureClient</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;afk-minio:9000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;seclab605607&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>依赖注入后，我们可以在任意地方使用这个客户端接口，例如在一个<code>FileService</code>类里，我们可以往构造函数里添加 MINIO客户端接口类：</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IFileService</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IMinioClient</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _minio_client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IMinioClient</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> minioClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _minio_client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minioClient;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="上传对象" tabindex="-1">上传对象 <a class="header-anchor" href="#上传对象" aria-label="Permalink to &quot;上传对象&quot;">​</a></h4><p>不论是上传还是下载对象，亦或是获取对象信息，基本的套路都是一样的：先构建一个参数类<code>xxArg</code>，填充对应的参数，然后调用对象操作，并将这个参数类传入。</p><p>下面是上传对象的一个例子：</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UploadAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IFormFile</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 打开文件流</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenReadStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 配置需要上传的对象属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> putArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PutObjectArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithBucket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上传的对象桶</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithStreamData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream)             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.FileName)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存的对象名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithObjectSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.Length)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithContentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.ContentType); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象的MIME type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 上传至MINIO对象存储</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _minio_client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PutObjectAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(putArgs);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fail to put object to minio: {Message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.Message);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>并不是所有的参数需要指定，由于此处通过<code>IFormFile</code>的文件流上传，需要指定<code>WithObjectSize</code>，如果只是想上传一个本地文件，API可以更简单。具体请参考 MINIO .NET SDK 的文档。</p></div><h4 id="下载对象" tabindex="-1">下载对象 <a class="header-anchor" href="#下载对象" aria-label="Permalink to &quot;下载对象&quot;">​</a></h4><p>对象的下载过程基本同上传一致：</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DownloadAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> objName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建内存流，准备将文件读取到该流中。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MemoryStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 从MINIO中获取对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getObjectArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetObjectArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithBucket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(objName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithCallbackStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CopyTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileStream); });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _minio_client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetObjectAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(getObjectArgs);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // （重要） 定位到开头，以供读取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fileStream.Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileStream;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error when get file from MINIO: {Message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.Message);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,37)),i("h2",r,[s[0]||(s[0]=a("文件交互设计 ")),p(n,{type:"tip",text:"难点"}),s[1]||(s[1]=a()),s[2]||(s[2]=i("a",{class:"header-anchor",href:"#文件交互设计","aria-label":'Permalink to "文件交互设计 <Badge type="tip" text="难点" />"'},"​",-1))]),s[4]||(s[4]=i("p",null,"所谓文件交互设计，就是指文件在整个程序中如何流动。例如：用户上传文件后返回什么？何时请求文件？该返回什么?",-1))])}const A=t(d,[["render",E]]);export{u as __pageData,A as default};
